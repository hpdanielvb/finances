#!/bin/bash

# Or√ßaZenFinanceiro - Deploy Script
# Script para deploy autom√°tico em produ√ß√£o

set -e  # Exit on any error

echo "üöÄ Or√ßaZenFinanceiro - Deploy em Produ√ß√£o"
echo "========================================"

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Instale o Docker primeiro."
    exit 1
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o est√° instalado. Instale o Docker Compose primeiro."
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Copiando do exemplo..."
    cp .env.example .env
    echo "üìù Configure o arquivo .env antes de continuar!"
    echo "üìù Edite: nano .env"
    exit 1
fi

# Fun√ß√£o para verificar se todas as vari√°veis est√£o configuradas
check_env_vars() {
    echo "üîç Verificando configura√ß√µes..."
    
    if grep -q "change_this" .env; then
        echo "‚ùå Ainda existem valores padr√£o no .env. Configure todas as vari√°veis!"
        echo "üìù Edite: nano .env"
        exit 1
    fi
    
    echo "‚úÖ Configura√ß√µes verificadas"
}

# Fun√ß√£o para fazer backup do banco de dados
backup_database() {
    echo "üíæ Fazendo backup do banco de dados..."
    
    if docker ps | grep -q orcazen_mongodb; then
        docker exec orcazen_mongodb mongodump --out /data/backup/$(date +%Y%m%d_%H%M%S)
        echo "‚úÖ Backup conclu√≠do"
    else
        echo "‚ÑπÔ∏è  MongoDB n√£o est√° rodando, pulando backup"
    fi
}

# Fun√ß√£o para fazer deploy
deploy() {
    echo "üèóÔ∏è  Iniciando deploy..."
    
    # Parar containers existentes
    echo "üõë Parando containers existentes..."
    docker-compose -f docker-compose.prod.yml down
    
    # Fazer backup se existir dados
    backup_database
    
    # Build das imagens
    echo "üî® Construindo imagens..."
    docker-compose -f docker-compose.prod.yml build --no-cache
    
    # Iniciar servi√ßos
    echo "üöÄ Iniciando servi√ßos..."
    docker-compose -f docker-compose.prod.yml up -d
    
    # Aguardar servi√ßos ficarem prontos
    echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
    sleep 30
    
    # Verificar status
    echo "üîç Verificando status dos servi√ßos..."
    docker-compose -f docker-compose.prod.yml ps
    
    echo ""
    echo "üéâ Deploy conclu√≠do com sucesso!"
    echo ""
    echo "üìä Acesse a aplica√ß√£o:"
    echo "   Frontend: http://localhost"
    echo "   Backend API: http://localhost/api/docs"
    echo ""
    echo "üìù Comandos √∫teis:"
    echo "   Logs: docker-compose -f docker-compose.prod.yml logs -f"
    echo "   Parar: docker-compose -f docker-compose.prod.yml down"
    echo "   Restart: docker-compose -f docker-compose.prod.yml restart"
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
health_check() {
    echo "üè• Verificando sa√∫de dos servi√ßos..."
    
    # Verificar se os containers est√£o rodando
    if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
        echo "‚ùå Alguns servi√ßos n√£o est√£o rodando"
        docker-compose -f docker-compose.prod.yml ps
        exit 1
    fi
    
    # Verificar endpoint de sa√∫de
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo "‚úÖ Aplica√ß√£o est√° saud√°vel"
    else
        echo "‚ö†Ô∏è  Endpoint de sa√∫de n√£o est√° respondendo"
    fi
}

# Fun√ß√£o para mostrar logs
show_logs() {
    echo "üìã Mostrando logs dos servi√ßos..."
    docker-compose -f docker-compose.prod.yml logs -f
}

# Menu principal
case "${1:-}" in
    "deploy")
        check_env_vars
        deploy
        ;;
    "health")
        health_check
        ;;
    "logs")
        show_logs
        ;;
    "backup")
        backup_database
        ;;
    "stop")
        echo "üõë Parando todos os servi√ßos..."
        docker-compose -f docker-compose.prod.yml down
        echo "‚úÖ Servi√ßos parados"
        ;;
    "restart")
        echo "üîÑ Reiniciando servi√ßos..."
        docker-compose -f docker-compose.prod.yml restart
        echo "‚úÖ Servi√ßos reiniciados"
        ;;
    *)
        echo "üìñ Uso: $0 {deploy|health|logs|backup|stop|restart}"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  deploy  - Fazer deploy completo da aplica√ß√£o"
        echo "  health  - Verificar sa√∫de dos servi√ßos"
        echo "  logs    - Mostrar logs em tempo real"
        echo "  backup  - Fazer backup do banco de dados"
        echo "  stop    - Parar todos os servi√ßos"
        echo "  restart - Reiniciar todos os servi√ßos"
        echo ""
        echo "Exemplo: $0 deploy"
        exit 1
        ;;
esac